rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function validateBeatData(data) {
      return data.keys().hasAll(['title', 'genre', 'bpm', 'price', 'producerId']) &&
             data.title is string && data.title.size() > 0 && data.title.size() <= 100 &&
             data.genre is string && data.genre.size() > 0 &&
             data.bpm is number && data.bpm >= 60 && data.bpm <= 200 &&
             data.price is number && data.price > 0 && data.price <= 1000;
    }
    
    function validateUserData(data) {
      return data.keys().hasAll(['uid', 'email', 'displayName', 'role']) &&
             data.displayName is string && data.displayName.size() > 0 && data.displayName.size() <= 50 &&
             data.role in ['user', 'producer', 'admin'];
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if true; // Public read for producer pages
      allow create: if isOwner(userId) && validateUserData(request.resource.data);
      allow update: if isOwner(userId) && validateUserData(request.resource.data);
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Beats collection
    match /beats/{beatId} {
      allow read: if true; // Public read for marketplace
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.producerId &&
        validateBeatData(request.resource.data);
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.producerId &&
        validateBeatData(request.resource.data);
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.producerId || isAdmin());
    }
    
    // Producer stats
    match /producer-stats/{userId} {
      allow read: if true; // Public read for producer pages
      allow write: if isOwner(userId);
    }
    
    // Purchases
    match /purchases/{purchaseId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.buyerId || 
         request.auth.uid == resource.data.producerId ||
         isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.buyerId &&
        request.resource.data.keys().hasAll(['beatId', 'buyerId', 'producerId', 'amount']);
      allow update: if isAdmin(); // Only admin can update purchase status
    }
    
    // Notifications
    match /notifications/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Rate limiting
    match /rate-limits/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Admin collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Analytics (read-only for users, write for system)
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Site settings (admin only)
    match /site-settings/{document=**} {
      allow read: if true; // Public read for site configuration
      allow write: if isAdmin();
    }
    
    // Admin settings
    match /admin-settings/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Blog posts (for Sanity CMS integration)
    match /blog-posts/{postId} {
      allow read: if true; // Public read for blog
      allow write: if isAdmin();
    }
  }
}
{"version":3,"file":"index.cjs","sources":["../src/editor-event-listener.tsx","../src/internal-utils/debug.ts","../src/internal-utils/values.ts","../src/internal-utils/slate-utils.ts","../src/internal-utils/event-position.ts","../src/internal-utils/paths.ts","../src/internal-utils/ranges.ts","../src/internal-utils/selection.ts","../src/internal-utils/weakMaps.ts","../src/editor/editor-actor-context.ts","../src/editor/components/drop-indicator.tsx","../src/editor/components/render-default-object.tsx","../src/internal-utils/drag-selection.ts","../src/editor/key-generator.ts","../src/priority/priority.types.ts","../src/priority/priority.core.ts","../src/behaviors/behavior.core.block-element.ts","../src/editor/components/use-core-block-element-behaviors.ts","../src/editor/components/render-block-object.tsx","../src/editor/components/render-inline-object.tsx","../src/editor/components/render-text-block.tsx","../src/editor/components/render-element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/internal-utils/stop-actor.ts","../src/converters/converter.json.ts","../src/converters/converter.portable-text.ts","../src/converters/converter.text-html.ts","../src/converters/converter.text-plain.ts","../src/converters/converters.core.ts","../src/internal-utils/schema.ts","../src/internal-utils/build-index-maps.ts","../src/internal-utils/create-placeholder-block.ts","../src/editor/get-active-annotations.ts","../src/editor/get-active-decorators.ts","../src/operations/behavior.operation.insert.text.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.17/node_modules/@portabletext/toolkit/dist/index.js","../src/internal-utils/sibling-utils.ts","../src/internal-utils/withChanges.ts","../src/internal-utils/withUndoRedo.ts","../src/editor/editor-selector.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js","../src/editor/with-undo-step.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/operations/behavior.operation.annotation.add.ts","../src/operations/behavior.operation.annotation.remove.ts","../src/operations/behavior.operation.block.set.ts","../src/operations/behavior.operation.block.unset.ts","../src/operations/behavior.operation.child.set.ts","../src/operations/behavior.operation.child.unset.ts","../src/operations/behavior.operation.decorator.add.ts","../src/operations/behavior.operation.delete.ts","../src/operations/behavior.operation.insert-inline-object.ts","../src/operations/behavior.operation.insert-span.ts","../src/operations/behavior.operation.insert.block.ts","../src/operations/behavior.operation.move.backward.ts","../src/operations/behavior.operation.move.block.ts","../src/operations/behavior.operation.move.forward.ts","../src/operations/behavior.operation.select.ts","../src/operations/behavior.operations.ts","../src/editor/with-applying-behavior-operations.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/internal-utils/applyPatch.ts","../src/internal-utils/operation-to-patches.ts","../src/internal-utils/withoutPatching.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/internal-utils/mark-state.ts","../src/editor/plugins/slate-plugin.update-mark-state.ts","../src/editor/plugins/slate-plugin.update-selection.ts","../src/internal-utils/portable-text-node.ts","../src/internal-utils/apply-operation-to-portable-text.ts","../src/editor/plugins/slate-plugin.update-value.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/editor/editor-dom.ts","../src/behaviors/behavior.core.annotations.ts","../src/keyboard-shortcuts/is-keyboard-shortcut.ts","../src/keyboard-shortcuts/keyboard-shortcuts.ts","../src/keyboard-shortcuts/default-keyboard-shortcuts.ts","../src/behaviors/behavior.core.block-objects.ts","../src/behaviors/behavior.core.decorators.ts","../src/internal-utils/compound-client-rect.ts","../src/behaviors/behavior.core.dnd.ts","../src/behaviors/behavior.core.insert-break.ts","../src/behaviors/behavior.core.lists.ts","../src/behaviors/behavior.core.ts","../src/behaviors/behavior.abstract.annotation.ts","../src/behaviors/behavior.abstract.decorator.ts","../src/behaviors/behavior.abstract.delete.ts","../src/behaviors/behavior.abstract.insert.ts","../src/behaviors/behavior.abstract.keyboard.ts","../src/behaviors/behavior.abstract.list-item.ts","../src/behaviors/behavior.abstract.move.ts","../src/behaviors/behavior.abstract.select.ts","../src/behaviors/behavior.abstract.split.ts","../src/behaviors/behavior.abstract.style.ts","../src/behaviors/behavior.abstract.ts","../src/behaviors/behavior.types.event.ts","../src/behaviors/behavior.perform-event.ts","../src/priority/priority.sort.ts","../src/editor/editor-snapshot.ts","../src/editor/editor-machine.ts","../src/editor/legacy-schema.ts","../src/editor/editor-schema.ts","../src/editor/mutation-machine.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/relay-machine.ts","../src/internal-utils/validateValue.ts","../src/editor/sync-machine.ts","../src/editor/create-editor.ts","../src/editor/relay-actor-context.ts","../src/editor/route-events-to-changes.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/render-span.tsx","../src/editor/components/render-leaf.tsx","../src/editor/components/render-text.tsx","../src/internal-utils/is-hotkey.ts","../src/editor/plugins/createWithHotKeys.ts","../src/editor/range-decorations-machine.ts","../src/editor/Editable.tsx","../src/internal-utils/use-constant.ts","../src/editor/editor-provider.tsx","../src/editor/editor-schema-definition.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getBlockPath({\n  editor,\n  _key,\n}: {\n  editor: PortableTextSlateEditor\n  _key: string\n}): [number] | undefined {\n  const [, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => n._key === _key,\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  const blockIndex = blockPath?.at(0)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  return [blockIndex]\n}\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [node, path] = Editor.node(editor, editor.selection.focus.path)\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const eventNode = getEventNode({slateEditor, event})\n\n  if (!eventNode) {\n    return undefined\n  }\n\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode,\n  })\n  const eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event,\n  })\n  const eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (\n    eventBlock &&\n    eventPositionBlock &&\n    !eventSelection &&\n    !Editor.isEditor(eventNode)\n  ) {\n    // If we for some reason can't find the event selection, then we default to\n    // selecting the entire block that the event originates from.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!eventPositionBlock || !eventSelection) {\n    return undefined\n  }\n\n  const eventSelectionFocusBlockKey = getBlockKeyFromSelectionPoint(\n    eventSelection.focus,\n  )\n\n  if (eventSelectionFocusBlockKey === undefined) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(eventSelection) &&\n    eventBlock &&\n    eventSelectionFocusBlockKey !== eventBlock._key\n  ) {\n    // If the event block and event selection somehow don't match, then the\n    // event block takes precedence.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: eventPositionBlock,\n    isEditor: Editor.isEditor(eventNode),\n    selection: eventSelection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import {Element, type Editor, type Path} from 'slate'\nimport type {EditorSelectionPoint} from '..'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\n\nexport function toSlatePath(\n  path: EditorSelectionPoint['path'],\n  editor: Editor,\n): Path {\n  const blockKey = getBlockKeyFromSelectionPoint({\n    path,\n    offset: 0,\n  })\n\n  if (!blockKey) {\n    return []\n  }\n\n  const blockIndex = editor.blockIndexMap.get(blockKey)\n\n  if (blockIndex === undefined) {\n    return []\n  }\n\n  const block = editor.children.at(blockIndex)\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockIndex, 0]\n  }\n\n  const childKey = getChildKeyFromSelectionPoint({\n    path,\n    offset: 0,\n  })\n\n  if (!childKey) {\n    return [blockIndex, 0]\n  }\n\n  let childPath: Array<number> = []\n  let childIndex = -1\n\n  for (const child of block.children) {\n    childIndex++\n    if (child._key === childKey) {\n      if (Element.isElement(child) && editor.isVoid(child)) {\n        childPath = [childIndex, 0]\n      } else {\n        childPath = [childIndex]\n      }\n      break\n    }\n  }\n\n  return [blockIndex].concat(childPath)\n}\n","import {Point, type Editor, type Operation, type Range} from 'slate'\nimport type {EditorSelection} from '../types/editor'\nimport {toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n\n  const range = anchor && focus ? {anchor, focus} : null\n\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import {getDragSelection} from '../internal-utils/drag-selection'\nimport type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = event.dragOrigin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const dragSelection = getDragSelection({\n            eventSelection: dragOrigin.selection,\n            snapshot,\n          })\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject | undefined\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  schema: EditorSchema\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = props.legacySchema.blockObjects.find(\n    (schemaType) => schemaType.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const blockObject = props.blockObject ?? {\n    _key: props.element._key,\n    _type: props.element._type,\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          props.renderBlock({\n            children: <RenderDefaultBlockObject blockObject={blockObject} />,\n            editorElementRef: blockObjectRef,\n            focused,\n            path: [{_key: props.element._key}],\n            schemaType: legacySchemaType,\n            selected,\n            type: legacySchemaType,\n            value: blockObject,\n          })\n        ) : (\n          <RenderDefaultBlockObject blockObject={blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {\n  useSelected,\n  useSlateSelector,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderChildFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n  schema: EditorSchema\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  const legacySchemaType = props.legacySchema.inlineObjects.find(\n    (inlineObject) => inlineObject.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  const inlineObject = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...('value' in props.element && typeof props.element.value === 'object'\n      ? props.element.value\n      : {}),\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={inlineObject._key}\n      data-child-name={inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          props.renderChild({\n            annotations: [],\n            children: <RenderDefaultInlineObject inlineObject={inlineObject} />,\n            editorElementRef: inlineObjectRef,\n            selected,\n            focused,\n            path: [{_key: block._key}, 'children', {_key: props.element._key}],\n            schemaType: legacySchemaType,\n            value: inlineObject,\n            type: legacySchemaType,\n          })\n        ) : (\n          <RenderDefaultInlineObject inlineObject={inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const listIndex = useSlateSelector((editor) =>\n    editor.listIndexMap.get(props.textBlock._key),\n  )\n\n  let children = props.children\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? props.legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = props.renderStyle({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        path: [{_key: props.textBlock._key}],\n        schemaType: legacyStyleSchemaType,\n        selected,\n        value: props.textBlock.style,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = props.legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = props.renderListItem({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        level: props.textBlock.level ?? 1,\n        path: [{_key: props.textBlock._key}],\n        selected,\n        value: props.textBlock.listItem,\n        schemaType: legacyListItemSchemaType,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n      {...(listIndex !== undefined\n        ? {\n            'data-list-index': listIndex,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock\n          ? props.renderBlock({\n              children,\n              editorElementRef: blockRef,\n              focused,\n              level: props.textBlock.level,\n              listItem: props.textBlock.listItem,\n              path: [{_key: props.textBlock._key}],\n              selected,\n              schemaType: props.legacySchema.block,\n              style: props.textBlock.style,\n              type: props.legacySchema.block,\n              value: props.textBlock,\n            })\n          : children}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport {useSlateStatic, type RenderElementProps} from 'slate-react'\nimport {isTextBlock} from '../../internal-utils/parse-blocks'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const slateStatic = useSlateStatic()\n\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n        schema={schema}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const blockIndex = slateStatic.blockIndexMap.get(props.element._key)\n  const block =\n    blockIndex !== undefined ? slateStatic.value.at(blockIndex) : undefined\n\n  if (isTextBlock({schema}, block)) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={block}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={block}\n      element={props.element}\n      legacySchema={legacySchema}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n      schema={schema}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection = snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = selectors.getSelectedValue(snapshot)\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          refreshKeys: true,\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = selectors.getSelectedValue(snapshot)\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = selectors.getSelectedValue(snapshot)\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return event.originEvent === 'drag.dragstart'\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return event.originEvent === 'drag.dragstart'\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport {isTextBlock} from './parse-blocks'\n\nconst levelIndexMap = new Map<number, number>()\n\n/**\n * Mutates the maps in place.\n */\nexport function buildIndexMaps(\n  context: Pick<EditorContext, 'schema' | 'value'>,\n  {\n    blockIndexMap,\n    listIndexMap,\n  }: {\n    blockIndexMap: Map<string, number>\n    listIndexMap: Map<string, number>\n  },\n): void {\n  blockIndexMap.clear()\n  listIndexMap.clear()\n  levelIndexMap.clear()\n\n  let previousListItem:\n    | {\n        listItem: string\n        level: number\n      }\n    | undefined\n\n  for (let blockIndex = 0; blockIndex < context.value.length; blockIndex++) {\n    const block = context.value.at(blockIndex)\n\n    if (block === undefined) {\n      continue\n    }\n\n    blockIndexMap.set(block._key, blockIndex)\n\n    if (!isTextBlock(context, block)) {\n      levelIndexMap.clear()\n      previousListItem = undefined\n      continue\n    }\n\n    if (block.listItem === undefined || block.level === undefined) {\n      levelIndexMap.clear()\n      previousListItem = undefined\n      continue\n    }\n\n    if (!previousListItem) {\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      levelIndexMap.set(block.level, 1)\n      listIndexMap.set(block._key, 1)\n      continue\n    }\n\n    if (previousListItem.listItem !== block.listItem) {\n      levelIndexMap.clear()\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      levelIndexMap.set(block.level, 1)\n      listIndexMap.set(block._key, 1)\n      continue\n    }\n\n    if (previousListItem.level === block.level) {\n      const levelCounter = levelIndexMap.get(block.level) ?? 0\n      levelIndexMap.set(block.level, levelCounter + 1)\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      listIndexMap.set(block._key, levelCounter + 1)\n      continue\n    }\n\n    if (previousListItem.level < block.level) {\n      levelIndexMap.set(block.level, 1)\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      listIndexMap.set(block._key, 1)\n      continue\n    }\n\n    if (previousListItem.level > block.level) {\n      const levelCounter = levelIndexMap.get(block.level) ?? 0\n      levelIndexMap.set(block.level, levelCounter + 1)\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      listIndexMap.set(block._key, levelCounter + 1)\n    }\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      } as PortableTextSpan,\n    ],\n  }\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveAnnotations({\n  markState,\n  schema,\n}: {\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import type {MarkState} from '../internal-utils/mark-state'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveDecorators({\n  decoratorState,\n  markState,\n  schema,\n}: {\n  decoratorState: Record<string, boolean | undefined>\n  markState: MarkState | undefined\n  schema: EditorSchema\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import {Transforms} from 'slate'\nimport {getActiveAnnotations} from '../editor/get-active-annotations'\nimport {getActiveDecorators} from '../editor/get-active-decorators'\nimport {getFocusSpan} from '../internal-utils/slate-utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({context, operation}) => {\n  const activeDecorators = getActiveDecorators({\n    decoratorState: operation.editor.decoratorState,\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n  const activeAnnotations = getActiveAnnotations({\n    markState: operation.editor.markState,\n    schema: context.schema,\n  })\n\n  const [focusSpan] = getFocusSpan({\n    editor: operation.editor,\n  })\n\n  if (!focusSpan) {\n    Transforms.insertText(operation.editor, operation.text)\n    return\n  }\n\n  if (\n    operation.editor.markState &&\n    operation.editor.markState.state === 'unchanged'\n  ) {\n    const markStateDecorators = (operation.editor.markState.marks ?? []).filter(\n      (mark) =>\n        context.schema.decorators\n          .map((decorator) => decorator.name)\n          .includes(mark),\n    )\n\n    if (\n      markStateDecorators.length === activeDecorators.length &&\n      markStateDecorators.every((mark) => activeDecorators.includes(mark))\n    ) {\n      Transforms.insertText(operation.editor, operation.text)\n      return\n    }\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations],\n  })\n\n  operation.editor.decoratorState = {}\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    blockIndexMap: slateEditorInstance.blockIndexMap,\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value,\n    },\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: slateEditorInstance.decoratorState,\n        markState: slateEditorInstance.markState,\n        schema: editorActorSnapshot.context.schema,\n      }),\n    },\n  }\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        if (!editor.markState) {\n          apply(op)\n          return\n        }\n\n        if (editor.markState.state === 'unchanged') {\n          apply(op)\n          return\n        }\n\n        Transforms.insertNodes(editor, {\n          _type: 'span',\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: editor.markState.marks,\n        })\n\n        return\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: snapshot.beta.activeDecorators},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge = currentUndoStepId === previousUndoStepId\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Path} from '@sanity/types'\nimport {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === parsedAnnotation._type,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n\n    blockIndex++\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false, validateFields: true},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childSetOperationImplementation: BehaviorOperationImplementation<\n  'child.set'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    const {_type, text, ...rest} = operation.props\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        ...rest,\n      },\n      {at: childPath},\n    )\n\n    if (typeof text === 'string') {\n      if (child.text !== text) {\n        operation.editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: child.text,\n        })\n\n        operation.editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text,\n        })\n      }\n    }\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const definition = context.schema.inlineObjects.find(\n      (definition) => definition.name === child._type,\n    )\n\n    if (!definition) {\n      throw new Error(\n        `Unable to find schema definition for Inline Object type ${child._type}`,\n      )\n    }\n\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const {_type, _key, ...rest} = operation.props\n\n    for (const prop in rest) {\n      if (!definition.fields.some((field) => field.name === prop)) {\n        delete rest[prop]\n      }\n    }\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: typeof _key === 'string' ? _key : child._key,\n        value: {\n          ...value,\n          ...rest,\n        },\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {applyAll} from '@portabletext/patches'\nimport {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childUnsetOperationImplementation: BehaviorOperationImplementation<\n  'child.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    if (operation.props.includes('text')) {\n      operation.editor.apply({\n        type: 'remove_text',\n        path: childPath,\n        offset: 0,\n        text: child.text,\n      })\n    }\n\n    const newNode: Record<string, unknown> = {}\n\n    for (const prop of operation.props) {\n      if (prop === '_type') {\n        // It's not allowed to unset the _type of a span\n        continue\n      }\n\n      if (prop === '_key') {\n        newNode._key = context.keyGenerator()\n        continue\n      }\n\n      newNode[prop] = null\n    }\n\n    Transforms.setNodes(operation.editor, newNode, {at: childPath})\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const patches = operation.props.map((prop) => ({\n      type: 'unset' as const,\n      path: [prop],\n    }))\n    const newValue = applyAll(value, patches)\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: operation.props.includes('_key')\n          ? context.keyGenerator()\n          : child._key,\n        value: newValue,\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, operation.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      blockIndexMap: editor.blockIndexMap,\n      beta: {\n        activeAnnotations: [],\n        activeDecorators: [],\n      },\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {Transforms} from 'slate'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {getBlockPath} from '../internal-utils/slate-utils'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({context, operation}) => {\n  const anchorBlockKey = getBlockKeyFromSelectionPoint(operation.at.anchor)\n  const focusBlockKey = getBlockKeyFromSelectionPoint(operation.at.focus)\n\n  const anchorBlockPath =\n    anchorBlockKey !== undefined\n      ? getBlockPath({\n          editor: operation.editor,\n          _key: anchorBlockKey,\n        })\n      : undefined\n  const focusBlockPath =\n    focusBlockKey !== undefined\n      ? getBlockPath({\n          editor: operation.editor,\n          _key: focusBlockKey,\n        })\n      : undefined\n\n  if (\n    operation.at.anchor.path.length === 1 &&\n    operation.at.focus.path.length === 1 &&\n    anchorBlockPath &&\n    focusBlockPath &&\n    anchorBlockPath[0] === focusBlockPath[0]\n  ) {\n    Transforms.removeNodes(operation.editor, {\n      at: [anchorBlockPath[0]],\n    })\n\n    if (operation.editor.children.length === 0) {\n      Transforms.insertNodes(operation.editor, createPlaceholderBlock(context))\n    }\n\n    return\n  }\n\n  const range = toSlateRange(operation.at, operation.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  operation.editor.delete({\n    at: range,\n    reverse: operation.direction === 'backward',\n    unit: operation.unit,\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {parseInlineObject} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertInlineObjectOperationImplementation: BehaviorOperationImplementation<\n  'insert.inline object'\n> = ({context, operation}) => {\n  const parsedInlineObject = parseInlineObject({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...(operation.inlineObject.value ?? {}),\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedInlineObject) {\n    throw new Error(\n      `Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`,\n    )\n  }\n\n  if (!operation.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [parsedInlineObject],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(operation.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertSpanOperationImplementation: BehaviorOperationImplementation<\n  'insert.span'\n> = ({context, operation}) => {\n  if (!operation.editor.selection) {\n    console.error('Unable to perform action without selection', operation)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', operation)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = operation.annotations\n    ? operation.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(operation.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(operation.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([endBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.splitNodes(editor, {\n                at: currentSelection,\n              })\n\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const at = [toSlatePath(operation.at, operation.editor)[0]]\n  const to = [toSlatePath(operation.to, operation.editor)[0]]\n\n  Transforms.moveNodes(operation.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({operation}) => {\n  const newSelection = toSlateRange(operation.at, operation.editor)\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n}\n","import type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {childSetOperationImplementation} from './behavior.operation.child.set'\nimport {childUnsetOperationImplementation} from './behavior.operation.child.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {insertInlineObjectOperationImplementation} from './behavior.operation.insert-inline-object'\nimport {insertSpanOperationImplementation} from './behavior.operation.insert-span'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n  TReturnType = void,\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => TReturnType\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'child.set': childSetOperationImplementation,\n  'child.unset': childUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.inline object': insertInlineObjectOperationImplementation,\n  'insert.span': insertSpanOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  try {\n    switch (operation.type) {\n      case 'annotation.add': {\n        behaviorOperationImplementations['annotation.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'annotation.remove': {\n        behaviorOperationImplementations['annotation.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.set': {\n        behaviorOperationImplementations['block.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.unset': {\n        behaviorOperationImplementations['block.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'child.set': {\n        behaviorOperationImplementations['child.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'child.unset': {\n        behaviorOperationImplementations['child.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.add': {\n        behaviorOperationImplementations['decorator.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.remove': {\n        behaviorOperationImplementations['decorator.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete': {\n        behaviorOperationImplementations.delete({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.redo': {\n        behaviorOperationImplementations['history.redo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.undo': {\n        behaviorOperationImplementations['history.undo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.block': {\n        behaviorOperationImplementations['insert.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.inline object': {\n        behaviorOperationImplementations['insert.inline object']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.span': {\n        behaviorOperationImplementations['insert.span']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.text': {\n        behaviorOperationImplementations['insert.text']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.backward': {\n        behaviorOperationImplementations['move.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.block': {\n        behaviorOperationImplementations['move.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.forward': {\n        behaviorOperationImplementations['move.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation: operation,\n        })\n        break\n      }\n    }\n  } catch (error) {\n    console.error(\n      new Error(\n        `Executing \"${operation.type}\" failed due to: ${error.message}`,\n      ),\n    )\n  }\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_OPERATION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorOperations(editor: Editor, fn: () => void) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_OPERATION_ID.set(editor, undefined)\n}\n\nexport function getCurrentOperationId(editor: Editor) {\n  return CURRENT_OPERATION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorOperations(editor: Editor) {\n  return getCurrentOperationId(editor) !== undefined\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {insertTextOperationImplementation} from '../../operations/behavior.operation.insert.text'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorOperations} from '../with-applying-behavior-operations'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {delete: editorDelete, select} = editor\n\n    editor.delete = (options) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        editorDelete(options)\n        return\n      }\n\n      const at = options?.at ?? editor.selection\n\n      if (!at) {\n        console.error('Unexpected call to .delete(...) without `at` option')\n        return\n      }\n\n      const range = Editor.range(editor, at)\n\n      const selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range,\n      })\n\n      if (!selection) {\n        console.error(\n          'Unexpected call to .delete(...) with invalid `at` option',\n        )\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete',\n          at: selection,\n          direction: options?.reverse ? 'backward' : 'forward',\n          unit: options?.unit,\n        },\n        editor,\n      })\n    }\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {Path, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {Element, Node, Text, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isKeyedSegment} from '../utils'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\nfunction diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  if (!child) {\n    return false\n  }\n\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block.node) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child.node)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.node.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.node.text, newValue), 5)\n\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({\n        type: 'insert_text',\n        path: [block.index, child.index],\n        offset,\n        text,\n      })\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: offset,\n        text,\n      })\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = block.index\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    return true\n  }\n\n  // Insert children\n  const {items, position} = patch\n\n  const targetChild = findBlockChild(block, patch.path)\n\n  if (!targetChild) {\n    return false\n  }\n\n  const childrenToInsert = toSlateValue(\n    [{...block.node, children: items as PortableTextChild[]}],\n    {schemaTypes: schema},\n    KEY_TO_SLATE_ELEMENT.get(editor),\n  )\n  const normalizedIdx =\n    position === 'after' ? targetChild.index + 1 : targetChild.index\n  const childInsertPath = [block.index, normalizedIdx]\n\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const isTextBlock = editor.isTextBlock(block.node)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // If this is targeting a text block child\n  if (isTextBlock && child) {\n    if (Text.isText(child.node)) {\n      if (Text.isText(value)) {\n        const oldText = child.node.text\n        const newText = value.text\n        if (oldText !== newText) {\n          editor.apply({\n            type: 'remove_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: oldText,\n          })\n          editor.apply({\n            type: 'insert_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: newText,\n          })\n          // call OnChange here to emit the new selection\n          // the user's selection might be interfering with\n          editor.onChange()\n        }\n      } else {\n        // Setting non-text span property\n\n        const propPath = patch.path.slice(3)\n        const propEntry = propPath.at(0)\n        const reservedProps = ['_key', '_type', 'text']\n\n        if (propEntry === undefined) {\n          return false\n        }\n\n        if (\n          typeof propEntry === 'string' &&\n          reservedProps.includes(propEntry)\n        ) {\n          return false\n        }\n\n        const newNode = applyAll(child.node, [\n          {\n            ...patch,\n            path: propPath,\n          },\n        ])\n\n        Transforms.setNodes(editor, newNode, {at: [block.index, child.index]})\n      }\n    } else {\n      // Setting inline object property\n\n      const propPath = patch.path.slice(3)\n      const reservedProps = ['_key', '_type', 'children', '__inline']\n      const propEntry = propPath.at(0)\n\n      if (propEntry === undefined) {\n        return false\n      }\n\n      if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n        return false\n      }\n\n      // If the child is an inline object, we need to apply the patch to the\n      // `value` property object.\n      const value =\n        'value' in child.node && typeof child.node.value === 'object'\n          ? child.node.value\n          : {}\n\n      const newValue = applyAll(value, [\n        {\n          ...patch,\n          path: patch.path.slice(3),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...child.node, value: newValue},\n        {at: [block.index, child.index]},\n      )\n    }\n\n    return true\n  } else if (Element.isElement(block.node) && patch.path.length === 1) {\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block.node || {\n      children: undefined,\n    }\n\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: [block.index],\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    const blockNode = block.node\n\n    blockNode.children.forEach((child, childIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child,\n      })\n    })\n\n    if (Array.isArray(children)) {\n      children.forEach((child, childIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: [block.index, childIndex],\n          node: child,\n        })\n      })\n    }\n  } else if (block && 'value' in block.node) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    return true\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (editor.children.length === 1) {\n      // `unset`ing the last block should be treated similar to `unset`ing the\n      // entire editor value\n      const previousSelection = editor.selection\n\n      Transforms.deselect(editor)\n      Transforms.removeNodes(editor, {at: [block.index]})\n      Transforms.insertNodes(\n        editor,\n        editor.pteCreateTextBlock({decorators: []}),\n      )\n\n      if (previousSelection) {\n        Transforms.select(editor, {\n          anchor: {path: [0, 0], offset: 0},\n          focus: {path: [0, 0], offset: 0},\n        })\n      }\n\n      editor.onChange()\n\n      return true\n    }\n\n    Transforms.removeNodes(editor, {at: [block.index]})\n\n    return true\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // Unset on text block children\n  if (editor.isTextBlock(block.node) && child) {\n    if (patch.path[1] === 'children' && patch.path.length === 3) {\n      Transforms.removeNodes(editor, {at: [block.index, child.index]})\n\n      return true\n    }\n  }\n\n  if (child && !Text.isText(child.node)) {\n    // Unsetting inline object property\n\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type', 'children', '__inline']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      // All custom properties are stored on the `value` property object.\n      // If you try to unset any of the other top-level properties it's a\n      // no-op.\n      return false\n    }\n\n    const value =\n      'value' in child.node && typeof child.node.value === 'object'\n        ? child.node.value\n        : {}\n\n    const newValue = applyAll(value, [\n      {\n        ...patch,\n        path: patch.path.slice(3),\n      },\n    ])\n\n    Transforms.setNodes(\n      editor,\n      {...child.node, value: newValue},\n      {at: [block.index, child.index]},\n    )\n\n    return true\n  }\n\n  if (child && Text.isText(child.node)) {\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && propEntry === 'text') {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text,\n      })\n\n      return true\n    }\n\n    const newNode = applyAll(child.node, [\n      {\n        ...patch,\n        path: propPath,\n      },\n    ])\n    const newKeys = Object.keys(newNode)\n\n    const removedProperties = Object.keys(child.node).filter(\n      (property) => !newKeys.includes(property),\n    )\n\n    Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index],\n    })\n\n    return true\n  }\n\n  if (!child) {\n    if ('value' in block.node) {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n\n      return true\n    }\n\n    return false\n  }\n\n  return false\n}\n\nfunction findBlock(\n  children: Descendant[],\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  let blockIndex = -1\n\n  const block = children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n\n    if (isMatch) {\n      blockIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!block) {\n    return undefined\n  }\n\n  return {node: block, index: blockIndex}\n}\n\nfunction findBlockChild(\n  block: {node: Descendant; index: number},\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  const blockNode = block.node\n\n  if (!Element.isElement(blockNode) || path[1] !== 'children') {\n    return undefined\n  }\n\n  let childIndex = -1\n\n  const child = blockNode.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n\n    if (isMatch) {\n      childIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!child) {\n    return undefined\n  }\n\n  return {\n    node: child,\n    index: childIndex,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {isSpan, isTextBlock} from './parse-blocks'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentOperationId} from '../with-applying-behavior-operations'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentOperationId(editor),\n            value: editor.value,\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const blockIndex = op.path.at(0)\n        const isLonelyBlock =\n          op.path.length === 1 &&\n          blockIndex === 0 &&\n          editor.children.length === 1\n        const isBlockObject =\n          op.node._type !== editorActor.getSnapshot().context.schema.block.name\n\n        if (isLonelyBlock && isBlockObject) {\n          debug('Adding placeholder block')\n          Editor.insertNode(editor, editor.pteCreateTextBlock({decorators: []}))\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n","import type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Editor, Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListBlock,\n  isSpan,\n  isTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {Range} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {getSelectedSpans} from '../selectors'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {getNextSpan, getPreviousSpan} from './sibling-utils'\nimport {getFocusBlock, getFocusSpan, slateRangeToSelection} from './slate-utils'\n\nexport type MarkState = {\n  state: 'changed' | 'unchanged'\n  marks: Array<string>\n}\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n */\nexport function getMarkState({\n  schema,\n  editor,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n}): MarkState | undefined {\n  if (!editor.selection) {\n    return undefined\n  }\n\n  const [block, blockPath] = getFocusBlock({\n    editor,\n  })\n  const [span, spanPath] = getFocusSpan({\n    editor,\n  })\n\n  if (!block || !editor.isTextBlock(block) || !span) {\n    return undefined\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    const selection = editor.selection\n      ? slateRangeToSelection({\n          schema,\n          editor,\n          range: editor.selection,\n        })\n      : null\n\n    const selectedSpans = getSelectedSpans({\n      blockIndexMap: editor.blockIndexMap,\n      context: {\n        value: editor.value,\n        selection,\n        schema,\n        converters: [],\n        keyGenerator: () => '',\n        readOnly: false,\n      },\n      beta: {\n        activeAnnotations: [],\n        activeDecorators: [],\n      },\n    })\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const span of selectedSpans) {\n      if (index === 0) {\n        marks = span.node.marks ?? []\n      } else {\n        if (\n          span.node.marks?.length === 0 ||\n          (span.node.marks ?? [])?.some((mark) => !marks.includes(mark))\n        ) {\n          marks = []\n        }\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n  const marks = span.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = span.text.length === 0\n\n  const atTheBeginningOfSpan = editor.selection.anchor.offset === 0\n  const atTheEndOfSpan = editor.selection.anchor.offset === span.text.length\n\n  const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n  const nextSpan = getNextSpan({editor, blockPath, spanPath})\n  const nextSpanAnnotations =\n    nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          marks: span.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          marks: nextSpan?.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        marks: [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        marks: (previousSpan?.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks: span.marks ?? [],\n  }\n}\n","import {getMarkState} from '../../internal-utils/mark-state'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateMarkState(\n  context: Pick<EditorContext, 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    apply(operation)\n\n    editor.markState = getMarkState({\n      editor,\n      schema: context.schema,\n    })\n  }\n\n  return editor\n}\n","import {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nexport function pluginUpdateSelection({\n  editor,\n  editorActor,\n}: {\n  editor: PortableTextSlateEditor\n  editorActor: EditorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(\n        editor.selection,\n      )\n\n      if (existingSelection) {\n        editorActor.send({\n          type: 'update selection',\n          selection: existingSelection,\n        })\n      } else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection)\n\n        editorActor.send({type: 'update selection', selection})\n      }\n    } else {\n      editorActor.send({type: 'update selection', selection: null})\n    }\n  }\n\n  const {onChange} = editor\n\n  editor.onChange = () => {\n    onChange()\n\n    if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n      updateSelection()\n    }\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from './asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    if (operation.type === 'insert_text' || operation.type === 'remove_text') {\n      // Inserting and removing text has no effect on index maps so there is\n      // no need to rebuild those.\n      apply(operation)\n      return\n    }\n\n    buildIndexMaps(\n      {\n        schema: context.schema,\n        value: editor.value,\n      },\n      {\n        blockIndexMap: editor.blockIndexMap,\n        listIndexMap: editor.listIndexMap,\n      },\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateMarkState} from './slate-plugin.update-mark-state'\nimport {pluginUpdateSelection} from './slate-plugin.update-selection'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPlaceholderBlock(\n            withUtils(\n              withMaxBlocks(\n                withUndoRedo(\n                  withPatches(\n                    pluginUpdateValue(\n                      editorActor.getSnapshot().context,\n                      pluginUpdateMarkState(\n                        editorActor.getSnapshot().context,\n                        pluginUpdateSelection({\n                          editorActor,\n                          editor: e,\n                        }),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {buildIndexMaps} from '../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratedRanges = []\n  instance.decoratorState = {}\n  instance.markState = undefined\n\n  const placeholderBlock = createPlaceholderBlock(\n    config.editorActor.getSnapshot().context,\n  )\n  instance.value = [placeholderBlock]\n  instance.blockIndexMap = new Map<string, number>()\n  instance.listIndexMap = new Map<string, number>()\n\n  buildIndexMaps(\n    {\n      schema: config.editorActor.getSnapshot().context.schema,\n      value: instance.value,\n    },\n    {\n      blockIndexMap: instance.blockIndexMap,\n      listIndexMap: instance.listIndexMap,\n    },\n  )\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {BehaviorEvent} from '../behaviors'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport type EditorDom = {\n  getBlockNodes: (snapshot: EditorSnapshot) => Array<Node>\n  getChildNodes: (snapshot: EditorSnapshot) => Array<Node>\n  /**\n   * Let the Editor set the drag ghost. This is to be sure that it will get\n   * properly removed again when the drag ends.\n   */\n  setDragGhost: ({\n    event,\n    ghost,\n  }: {\n    event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n    ghost: {\n      element: HTMLElement\n      x: number\n      y: number\n    }\n  }) => void\n}\n\nexport function createEditorDom(\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void,\n  slateEditor: PortableTextSlateEditor,\n): EditorDom {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({event, ghost}) => setDragGhost({sendBack, event, ghost}),\n  }\n}\n\nfunction getBlockNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const blockEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'highest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction getChildNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const childEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'lowest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost,\n}: {\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n  event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n  ghost: {\n    element: HTMLElement\n    x: number\n    y: number\n  }\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y)\n\n  sendBack({\n    type: 'set drag ghost',\n    ghost: ghost.element,\n  })\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","type AllowedModifiers = {\n  ctrlKey?: boolean\n  metaKey?: boolean\n  shiftKey?: boolean\n  altKey?: boolean\n}\n\nexport function isKeyboardShortcut<\n  TKeyboardEvent extends Pick<\n    KeyboardEvent,\n    'key' | 'shiftKey' | 'altKey' | 'ctrlKey' | 'metaKey'\n  > = Pick<\n    KeyboardEvent,\n    'key' | 'shiftKey' | 'altKey' | 'ctrlKey' | 'metaKey'\n  >,\n>(event: TKeyboardEvent, key: string, allowedModifiers: AllowedModifiers = {}) {\n  return (\n    event.key.toLowerCase() === key.toLowerCase() &&\n    (allowedModifiers.ctrlKey === event.ctrlKey ||\n      allowedModifiers.ctrlKey === undefined) &&\n    (allowedModifiers.metaKey === event.metaKey ||\n      allowedModifiers.metaKey === undefined) &&\n    (allowedModifiers.shiftKey === event.shiftKey ||\n      allowedModifiers.shiftKey === undefined) &&\n    (allowedModifiers.altKey === event.altKey ||\n      allowedModifiers.altKey === undefined)\n  )\n}\n","export type KeyboardEventGuard<\n  TKeyboardEvent extends Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  > = Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n> = (event: TKeyboardEvent) => boolean\n\n/**\n * @beta\n * Definition of an editor keyboard shortcut with platform-specific key mappings.\n *\n * @example\n * ```typescript\n * const boldShortcut: ShortcutDefinition = {\n *   default: {\n *     guard: (event) => isKeyboardShortcut(event, 'B', {ctrlKey: true, metaKey: false}),\n *     keys: ['Ctrl', 'B'],\n *   },\n *   apple: {\n *     guard: (event) => isKeyboardShortcut(event, 'B', {ctrlKey: false, metaKey: true}),\n *     keys: ['⌘', 'B'],\n *   },\n * }\n * ```\n */\nexport type KeyboardShortcutDefinition<\n  TKeyboardEvent extends Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  > = Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n> = {\n  /**\n   * Default shortcut for non-Apple platforms (Windows, Linux).\n   */\n  default: {\n    guard: KeyboardEventGuard<TKeyboardEvent>\n    keys: ReadonlyArray<string>\n  }\n  /**\n   * Shortcut for Apple platforms (macOS).\n   */\n  apple?: {\n    guard: KeyboardEventGuard<TKeyboardEvent>\n    keys: ReadonlyArray<string>\n  }\n}\n\n/**\n * @beta\n * A resolved keyboard shortcut for the current platform.\n *\n * This type represents a shortcut that has been processed by `createShortcut()`\n * to select the appropriate platform-specific key combination. The `guard` function\n * determines if the shortcut applies to the current `KeyboardEvent`, while `keys`\n * contains the display-friendly key combination for the current platform.\n *\n * @example\n * ```typescript\n * const shortcut = createShortcut({\n *   guard: (event) => isKeyboardShortcut(event, 'B', {ctrlKey: true, metaKey: false}),\n *   keys: {\n *     default: ['Ctrl', 'B'],\n *     apple: ['⌘', 'B'],\n *   },\n * })\n * // On macOS: shortcut.keys = ['⌘', 'B']\n * // On Windows: shortcut.keys = ['Ctrl', 'B']\n * ```\n */\nexport type KeyboardShortcut<\n  TKeyboardEvent extends Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  > = Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n> = {\n  /**\n   * Function that determines if the shortcut should be triggered for a given\n   * keyboard event.\n   */\n  guard: KeyboardEventGuard<TKeyboardEvent>\n  /**\n   * Platform-specific key combination for display purposes (resolved for the\n   * current platform).\n   */\n  keys: ReadonlyArray<string>\n}\n\nexport const IS_APPLE =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\n/**\n * @beta\n * Utility function for creating a `KeyboardShortcut` from a\n * `KeyboardShortcutDefinition`.\n */\nexport function createKeyboardShortcut<\n  TKeyboardEvent extends Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  > = Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n>(\n  definition: KeyboardShortcutDefinition<TKeyboardEvent>,\n): KeyboardShortcut<TKeyboardEvent> {\n  return IS_APPLE\n    ? (definition.apple ?? definition.default)\n    : definition.default\n}\n","import {isKeyboardShortcut} from './is-keyboard-shortcut'\nimport {createKeyboardShortcut} from './keyboard-shortcuts'\n\nexport const defaultKeyboardShortcuts = {\n  arrowDown: createKeyboardShortcut({\n    default: {\n      guard: (event) =>\n        isKeyboardShortcut(event, 'ArrowDown', {\n          ctrlKey: false,\n          metaKey: false,\n          shiftKey: false,\n          altKey: false,\n        }),\n      keys: ['ArrowDown'],\n    },\n  }),\n  arrowUp: createKeyboardShortcut({\n    default: {\n      guard: (event) =>\n        isKeyboardShortcut(event, 'ArrowUp', {\n          ctrlKey: false,\n          metaKey: false,\n          shiftKey: false,\n          altKey: false,\n        }),\n      keys: ['ArrowUp'],\n    },\n  }),\n  break: createKeyboardShortcut({\n    default: {\n      guard: (event) => isKeyboardShortcut(event, 'Enter', {shiftKey: false}),\n      keys: ['Enter'],\n    },\n  }),\n  lineBreak: createKeyboardShortcut({\n    default: {\n      guard: (event) => isKeyboardShortcut(event, 'Enter', {shiftKey: true}),\n      keys: ['Shift', 'Enter'],\n    },\n  }),\n  decorators: {\n    strong: createKeyboardShortcut({\n      default: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'b', {\n            altKey: false,\n            ctrlKey: true,\n            metaKey: false,\n            shiftKey: false,\n          }),\n        keys: ['Ctrl', 'B'],\n      },\n      apple: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'b', {\n            altKey: false,\n            ctrlKey: false,\n            metaKey: true,\n            shiftKey: false,\n          }),\n        keys: ['⌘', 'B'],\n      },\n    }),\n    em: createKeyboardShortcut({\n      default: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'i', {\n            altKey: false,\n            ctrlKey: true,\n            metaKey: false,\n            shiftKey: false,\n          }),\n        keys: ['Ctrl', 'I'],\n      },\n      apple: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'i', {\n            altKey: false,\n            ctrlKey: false,\n            metaKey: true,\n            shiftKey: false,\n          }),\n        keys: ['⌘', 'I'],\n      },\n    }),\n    underline: createKeyboardShortcut({\n      default: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'u', {\n            altKey: false,\n            ctrlKey: true,\n            metaKey: false,\n            shiftKey: false,\n          }),\n        keys: ['Ctrl', 'U'],\n      },\n      apple: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'u', {\n            altKey: false,\n            ctrlKey: false,\n            metaKey: true,\n            shiftKey: false,\n          }),\n        keys: ['⌘', 'U'],\n      },\n    }),\n    code: createKeyboardShortcut({\n      default: {\n        guard: (event) =>\n          isKeyboardShortcut(event, \"'\", {\n            altKey: false,\n            ctrlKey: true,\n            metaKey: false,\n            shiftKey: false,\n          }),\n        keys: ['Ctrl', \"'\"],\n      },\n      apple: {\n        guard: (event) =>\n          isKeyboardShortcut(event, \"'\", {\n            altKey: false,\n            ctrlKey: false,\n            metaKey: true,\n            shiftKey: false,\n          }),\n        keys: ['⌘', \"'\"],\n      },\n    }),\n  },\n  history: {\n    undo: createKeyboardShortcut({\n      default: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'z', {\n            altKey: false,\n            ctrlKey: true,\n            metaKey: false,\n            shiftKey: false,\n          }),\n        keys: ['Ctrl', 'Z'],\n      },\n      apple: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'z', {\n            altKey: false,\n            ctrlKey: false,\n            metaKey: true,\n            shiftKey: false,\n          }),\n        keys: ['⌘', 'Z'],\n      },\n    }),\n    redo: createKeyboardShortcut({\n      default: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'y', {\n            ctrlKey: true,\n            metaKey: false,\n            shiftKey: false,\n            altKey: false,\n          }) ||\n          isKeyboardShortcut(event, 'z', {\n            ctrlKey: true,\n            metaKey: false,\n            shiftKey: true,\n            altKey: false,\n          }),\n        keys: ['Ctrl', 'Y'],\n      },\n      apple: {\n        guard: (event) =>\n          isKeyboardShortcut(event, 'z', {\n            ctrlKey: false,\n            metaKey: true,\n            shiftKey: true,\n            altKey: false,\n          }),\n        keys: ['⌘', 'Shift', 'Z'],\n      },\n    }),\n  },\n  tab: createKeyboardShortcut({\n    default: {\n      guard: (event) =>\n        isKeyboardShortcut(event, 'Tab', {\n          ctrlKey: false,\n          metaKey: false,\n          shiftKey: false,\n          altKey: false,\n        }),\n      keys: ['Tab'],\n    },\n  }),\n  shiftTab: createKeyboardShortcut({\n    default: {\n      guard: (event) =>\n        isKeyboardShortcut(event, 'Tab', {\n          ctrlKey: false,\n          metaKey: false,\n          shiftKey: true,\n          altKey: false,\n        }),\n      keys: ['Shift', 'Tab'],\n    },\n  }),\n}\n","import {isTextBlock} from '../internal-utils/parse-blocks'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = defaultKeyboardShortcuts.arrowDown.guard(\n      event.originEvent,\n    )\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = defaultKeyboardShortcuts.arrowUp.guard(event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.strong.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.em.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.underline.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.code.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport * as selectors from '../selectors'\nimport {effect, forward, raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  defineBehavior({\n    on: 'drag.dragstart',\n    guard: ({snapshot, dom, event}) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection,\n      })\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n      const draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n      }\n\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks,\n      }\n    },\n    actions: [\n      (\n        {dom, event},\n        {dragSelection, draggedDomNodes, selectingEntireBlocks},\n      ) => {\n        const dragGhost = document.createElement('div')\n\n        if (selectingEntireBlocks) {\n          // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n          const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const block of clonedBlockNodes) {\n            if (block instanceof HTMLElement) {\n              block.style.position = 'relative'\n            }\n            dragGhost.appendChild(block)\n          }\n\n          // A custom drag ghost element can be configured using this data attribute\n          const customGhost = dragGhost.querySelector(\n            '[data-pt-drag-ghost-element]',\n          )\n          if (customGhost) {\n            dragGhost.replaceChildren(customGhost)\n          }\n\n          // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n          dragGhost.setAttribute('data-dragged', '')\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          if (customGhost) {\n            const customGhostRect = customGhost.getBoundingClientRect()\n            const x = event.originEvent.clientX - customGhostRect.left\n            const y = event.originEvent.clientY - customGhostRect.top\n            dragGhost.style.width = `${customGhostRect.width}px`\n            dragGhost.style.height = `${customGhostRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {\n                    element: dragGhost,\n                    x,\n                    y,\n                  },\n                })\n              }),\n              forward(event),\n            ]\n          } else {\n            const blocksDomRect = getCompoundClientRect(\n              draggedDomNodes.blockNodes,\n            )\n            const x = event.originEvent.clientX - blocksDomRect.left\n            const y = event.originEvent.clientY - blocksDomRect.top\n            dragGhost.style.width = `${blocksDomRect.width}px`\n            dragGhost.style.height = `${blocksDomRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {element: dragGhost, x, y},\n                })\n              }),\n              forward(event),\n            ]\n          }\n        } else {\n          const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const child of clonedChildNodes) {\n            dragGhost.appendChild(child)\n          }\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          const childrenDomRect = getCompoundClientRect(\n            draggedDomNodes.childNodes,\n          )\n          const x = event.originEvent.clientX - childrenDomRect.left\n          const y = event.originEvent.clientY - childrenDomRect.top\n          dragGhost.style.width = `${childrenDomRect.width}px`\n          dragGhost.style.height = `${childrenDomRect.height}px`\n\n          return [\n            raise({\n              type: 'select',\n              at: dragSelection,\n            }),\n            effect(() => {\n              dom.setDragGhost({\n                event,\n                ghost: {element: dragGhost, x, y},\n              })\n            }),\n            forward(event),\n          ]\n        }\n      },\n    ],\n  }),\n\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({event}) => event.dragOrigin !== undefined,\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        event.originEvent.dragOrigin === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = event.originEvent.dragOrigin\n      const dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot,\n      })\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          dropPosition,\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          dropPosition,\n          originEvent,\n        },\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'select',\n          at: dropPosition,\n        }),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nconst breakingInlineObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusInlineObject = selectors.getFocusInlineObject(snapshot)\n\n    return selectionCollapsed && focusInlineObject\n  },\n  actions: [\n    () => [raise({type: 'move.forward', distance: 1}), raise({type: 'split'})],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject,\n}\n","import {isListBlock} from '../internal-utils/parse-blocks'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = defaultKeyboardShortcuts.tab.guard(event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = defaultKeyboardShortcuts.shiftTab.guard(\n      event.originEvent,\n    )\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n  coreInsertBreakBehaviors.breakingInlineObject,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {isActiveAnnotation} from '../selectors'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.set',\n    guard: ({snapshot, event}) => {\n      const blockKey = event.at[0]._key\n      const markDefKey = event.at[2]._key\n\n      const block = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n            focus: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!block) {\n        return false\n      }\n\n      const updatedMarkDefs = block.node.markDefs?.map((markDef) => {\n        if (markDef._key === markDefKey) {\n          return {\n            ...markDef,\n            ...event.props,\n          }\n        }\n\n        return markDef\n      })\n\n      return {blockKey, updatedMarkDefs}\n    },\n    actions: [\n      (_, {blockKey, updatedMarkDefs}) => [\n        raise({\n          type: 'block.set',\n          at: [{_key: blockKey}],\n          props: {markDefs: updatedMarkDefs},\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import {isSpan} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'backward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.forward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'forward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'delete',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.child',\n    guard: ({snapshot, event}) => {\n      const focusChild = selectors.getFocusChild({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!focusChild) {\n        return false\n      }\n\n      if (isSpan(snapshot.context, focusChild.node)) {\n        return {\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: focusChild.node.text.length,\n            },\n          },\n        }\n      }\n\n      return {\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0,\n          },\n          focus: {\n            path: event.at,\n            offset: 0,\n          },\n        },\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return {focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {focusTextBlock}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: event.select ?? 'end',\n              }),\n            ]\n          : isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n            ? event.blocks.map((block, index) =>\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: index === 0 ? 'auto' : 'after',\n                  select: event.select ?? 'end',\n                }),\n              )\n            : event.blocks.flatMap((block, index) =>\n                index === 0\n                  ? [\n                      raise({\n                        type: 'split',\n                      }),\n                      raise({\n                        type: 'select.previous block',\n                        select: 'end',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: event.select ?? 'end',\n                      }),\n                    ]\n                  : index === event.blocks.length - 1\n                    ? [\n                        raise({\n                          type: 'select.next block',\n                          select: 'start',\n                        }),\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'auto',\n                          select: event.select ?? 'end',\n                        }),\n                      ]\n                    : [\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'after',\n                          select: event.select ?? 'end',\n                        }),\n                      ],\n              ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n]\n","import {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * Allow raising an `insert.break` event when pressing Enter on an inline\n   * object.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.break.guard(event.originEvent) &&\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'insert.break'})]],\n  }),\n\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.lineBreak.guard(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n\n  /**\n   * Manual handling of undo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.undo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.undo'})]],\n  }),\n\n  /**\n   * Manual handling of redo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.redo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.redo'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [],\n  }),\n\n  /**\n   * You can't split a block object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusBlockObject(snapshot),\n    actions: [],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n      const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (\n        !isTextBlock(snapshot.context, selectionStartBlock.node) &&\n        isTextBlock(snapshot.context, selectionEndBlock.node)\n      ) {\n        return {selection}\n      }\n\n      return false\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      return {selection}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({type: 'delete', at: selection}),\n        raise({type: 'split'}),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || !utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartPoint = utils.getSelectionStartPoint(selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      const blockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n\n      const newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint,\n      }\n\n      const newTextBlock = parseBlock({\n        block: sliceTextBlock({\n          context: {\n            ...snapshot.context,\n            selection: newTextBlockSelection,\n          },\n          block: focusTextBlock.node,\n        }),\n        context: snapshot.context,\n        options: {refreshKeys: true, validateFields: true},\n      })\n\n      if (!newTextBlock) {\n        return false\n      }\n\n      return {\n        newTextBlock,\n        newTextBlockSelection,\n      }\n    },\n    actions: [\n      (_, {newTextBlock, newTextBlockSelection}) =>\n        utils.isSelectionCollapsed(newTextBlockSelection)\n          ? [\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({type: 'delete', at: newTextBlockSelection}),\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import type {ConverterEvent} from '../converters/converter.types'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PickFromUnion} from '../type-utils'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    let success:\n      | PickFromUnion<ConverterEvent, 'type', 'deserialization.success'>\n      | undefined\n    const failures: Array<\n      PickFromUnion<ConverterEvent, 'type', 'deserialization.failure'>\n    > = []\n\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(\n        converter.mimeType,\n      )\n\n      if (!data) {\n        continue\n      }\n\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {type: 'deserialize', data},\n      })\n\n      if (deserializeEvent.type === 'deserialization.success') {\n        success = deserializeEvent\n        break\n      } else {\n        failures.push(deserializeEvent)\n      }\n    }\n\n    if (!success) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: failures.map((failure) => failure.reason).join(', '),\n      } as const\n    }\n\n    return success\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.beta.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n]\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\nimport type {AnnotationPath, BlockPath, ChildPath} from '../types/paths'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'child.set',\n  'child.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: BlockPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: BlockPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.set'>\n      at: ChildPath\n      props: {[prop: string]: unknown}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.unset'>\n      at: ChildPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n      /**\n       * Defaults to forward deletion.\n       */\n      direction?: 'backward' | 'forward'\n      /**\n       * Defaults to character deletion.\n       */\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: BlockPath\n      to: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\n/**\n * @beta\n */\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.set',\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.backward',\n  'delete.block',\n  'delete.child',\n  'delete.forward',\n  'delete.text',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.soft break',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.set'>\n      at: AnnotationPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.child'>\n      at: ChildPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        clientX: number\n        clientY: number\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import {createEditorDom} from '../editor/editor-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withApplyingBehaviorOperations} from '../editor/with-applying-behavior-operations'\nimport {withUndoStep} from '../editor/with-undo-step'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack,\n}: {\n  mode: 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n}) {\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n          dom: createEditorDom(sendBack, editor),\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n            dom: createEditorDom(sendBack, editor),\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      nativeEventPrevented =\n        actions.some(\n          (action) => action.type === 'raise' || action.type === 'execute',\n        ) || !actions.some((action) => action.type === 'forward')\n\n      if (actions.some((action) => action.type === 'execute')) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        withUndoStep(editor, () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              try {\n                action.effect()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              performEvent({\n                mode: 'raise',\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n              sendBack,\n            })\n          }\n        })\n\n        continue\n      }\n\n      for (const action of actions) {\n        if (action.type === 'effect') {\n          try {\n            action.effect()\n          } catch (error) {\n            console.error(\n              new Error(\n                `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n\n          continue\n        }\n\n        if (action.type === 'forward') {\n          const remainingEventBehaviors = eventBehaviors.slice(\n            eventBehaviorIndex + 1,\n          )\n\n          performEvent({\n            mode: 'forward',\n            behaviors,\n            remainingEventBehaviors: remainingEventBehaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n            sendBack,\n          })\n\n          continue\n        }\n\n        if (action.type === 'raise') {\n          performEvent({\n            mode: 'raise',\n            behaviors,\n            remainingEventBehaviors: behaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n            sendBack,\n          })\n\n          continue\n        }\n\n        if (action.type === 'execute') {\n          console.error('Unexpected action type: `execute`')\n        }\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {getActiveAnnotations} from './get-active-annotations'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    activeAnnotations: Array<string>\n    activeDecorators: Array<string>\n  }\n  blockIndexMap: Map<string, number>\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    blockIndexMap: editor.blockIndexMap,\n    context,\n    beta: {\n      activeAnnotations: getActiveAnnotations({\n        markState: editor.markState,\n        schema,\n      }),\n      activeDecorators: getActiveDecorators({\n        decoratorState: editor.decoratorState,\n        markState: editor.markState,\n        schema,\n      }),\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'set drag ghost'\n      ghost: HTMLElement\n    }\n  | {\n      type: 'dragstart'\n      ghost?: HTMLElement\n      origin: Pick<EventPosition, 'selection'>\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      behaviorsSorted: boolean\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        origin: Pick<EventPosition, 'selection'>\n      }\n      dragGhost?: HTMLElement\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n      behaviorsSorted: false,\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = [...context.behaviors.values()].map(\n          (config) => config.behavior,\n        )\n\n        performEvent({\n          mode: 'raise',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n            }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (event) => self.send(event),\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n    'sort behaviors': assign({\n      behaviors: ({context}) =>\n        !context.behaviorsSorted\n          ? new Set(sortByPriority([...context.behaviors.values()]))\n          : context.behaviors,\n      behaviorsSorted: true,\n    }),\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set(coreBehaviorsConfig),\n    behaviorsSorted: false,\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'set drag ghost': {\n      actions: assign({dragGhost: ({event}) => event.ghost}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.dragGhost) {\n                    try {\n                      context.dragGhost.parentNode?.removeChild(\n                        context.dragGhost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({dragGhost: undefined}),\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createLegacySchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {\n  BaseDefinition,\n  FieldDefinition,\n  SchemaDefinition,\n} from './editor-schema-definition'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`\nconst temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`\n\nconst temporaryObjectNames: Record<string, string> = {\n  image: temporaryImageName,\n  url: temporaryUrlName,\n}\n\nconst objectNames: Record<string, string> = {\n  [temporaryImageName]: 'image',\n  [temporaryUrlName]: 'url',\n}\n\nconst defaultObjectTitles: Record<string, string> = {\n  image: 'Image',\n  url: 'URL',\n}\n\n/**\n * @public\n */\nexport type EditorSchema = {\n  annotations: ReadonlyArray<AnnotationSchemaType>\n  block: {\n    name: string\n  }\n  blockObjects: ReadonlyArray<BlockObjectSchemaType>\n  decorators: ReadonlyArray<DecoratorSchemaType>\n  inlineObjects: ReadonlyArray<InlineObjectSchemaType>\n  span: {\n    name: string\n  }\n  styles: ReadonlyArray<StyleSchemaType>\n  lists: ReadonlyArray<ListSchemaType>\n}\n\n/**\n * @public\n */\nexport type AnnotationSchemaType = BaseDefinition & {\n  fields: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type BlockObjectSchemaType = BaseDefinition & {\n  fields: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type DecoratorSchemaType = BaseDefinition & {\n  /**\n   * @deprecated\n   * Use `name` instead\n   */\n  value: string\n}\n\n/**\n * @public\n */\nexport type InlineObjectSchemaType = BaseDefinition & {\n  fields: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type ListSchemaType = BaseDefinition & {\n  /**\n   * @deprecated\n   * Use `name` instead\n   */\n  value: string\n}\n\n/**\n * @public\n */\nexport type StyleSchemaType = BaseDefinition & {\n  /**\n   * @deprecated\n   * Use `name` instead\n   */\n  value: string\n}\n\nexport function legacySchemaToEditorSchema(\n  schema: PortableTextMemberSchemaTypes,\n): EditorSchema {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: annotation.title,\n    })),\n    block: {\n      name: schema.block.name,\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: blockObject.title,\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value,\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: inlineObject.title,\n    })),\n    span: {\n      name: schema.span.name,\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value,\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value,\n    })),\n  }\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition: TSchemaDefinition): EditorSchema {\n  return legacySchemaToEditorSchema(\n    compileSchemaDefinitionToLegacySchema(definition),\n  )\n}\n\nexport function compileSchemaDefinitionToLegacySchema<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition): PortableTextMemberSchemaTypes {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n        title:\n          blockObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[blockObject.name]\n            : blockObject.title,\n        fields:\n          blockObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n\n        title:\n          inlineObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[inlineObject.name]\n            : inlineObject.title,\n        fields:\n          inlineObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              fields:\n                annotation.fields?.map((field) => ({\n                  name: field.name,\n                  type: field.type,\n                })) ?? [],\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createLegacySchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      objectNames[blockObject.name] !== undefined\n        ? ({\n            ...blockObject,\n            name: objectNames[blockObject.name],\n            type: {\n              ...blockObject.type,\n              name: objectNames[blockObject.name],\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) =>\n      objectNames[inlineObject.name] !== undefined\n        ? ({\n            ...inlineObject,\n            name: objectNames[inlineObject.name],\n          } as ObjectSchemaType)\n        : inlineObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'mutation delay passed'\n        }\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': enqueueActions(({event, enqueue}) => {\n      if (event.type === 'patch') {\n        enqueue.emit({type: 'patch', patch: event.patch})\n      }\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n    'mutation debouncer': fromCallback(({sendBack}) => {\n      const interval = setInterval(\n        () => {\n          sendBack({type: 'mutation delay passed'})\n        },\n        process.env.NODE_ENV === 'test' ? 250 : 0,\n      )\n\n      return () => {\n        clearInterval(interval)\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'is typing': stateIn({typing: 'typing'}),\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n              debug('entry: typing->typing')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n              actions: [\n                () => {\n                  debug('exit: typing->typing')\n                },\n              ],\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n            ],\n          },\n        },\n        'has pending mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->has pending mutations')\n            },\n            'emit has pending mutations',\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->has pending mutations')\n            },\n          ],\n          invoke: {\n            src: 'mutation debouncer',\n          },\n          on: {\n            'mutation delay passed': {\n              guard: and([\n                not('is read-only'),\n                not('is typing'),\n                'slate is normalizing',\n              ]),\n              target: 'idle',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n                'emit mutations',\n                'clear pending mutations',\n              ],\n            },\n            'patch': [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateRange} from '../../internal-utils/ranges'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {addAnnotationOperationImplementation} from '../../operations/behavior.operation.annotation.add'\nimport {isActiveAnnotation} from '../../selectors'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return snapshot.beta.activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return [\n        ...snapshot.beta.activeAnnotations,\n        ...snapshot.beta.activeDecorators,\n      ]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return isActiveAnnotation(annotationType)(snapshot)\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          operation: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {assign, emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    context: {} as {\n      prevSelection: EditorSelection\n      lastEventWasFocused: boolean\n    },\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: false,\n  },\n  on: {\n    'focused': {\n      actions: [\n        assign({\n          lastEventWasFocused: true,\n        }),\n        emit(({event}) => event),\n      ],\n    },\n    'selection': [\n      {\n        guard: ({context}) => context.lastEventWasFocused,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n      {\n        guard: ({context, event}) => context.prevSelection !== event.selection,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n    ],\n    '*': {\n      actions: [\n        emit(({event}) => event),\n        assign({\n          lastEventWasFocused: false,\n        }),\n      ],\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\nimport {isTextBlock} from './parse-blocks'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            if (hadSelection) {\n              Transforms.deselect(slateEditor)\n            }\n\n            const childrenLength = slateEditor.children.length\n\n            slateEditor.children.forEach((_, index) => {\n              Transforms.removeNodes(slateEditor, {\n                at: [childrenLength - 1 - index],\n              })\n            })\n\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n              {at: [0]},\n            )\n\n            // Add a new selection in the top of the document\n            if (hadSelection) {\n              Transforms.select(slateEditor, [0, 0])\n            }\n          })\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                Transforms.delete(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {createEditorDom} from './editor-dom'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine} from './editor-machine'\nimport {\n  compileSchemaDefinitionToLegacySchema,\n  legacySchemaToEditorSchema,\n} from './editor-schema'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    dom: createEditorDom(\n      (event) => editorActor.send(event),\n      slateEditor.instance,\n    ),\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'blur':\n          editorActor.send({\n            type: 'blur',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'focus':\n          editorActor.send({\n            type: 'focus',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition)\n    : createLegacySchema(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = legacySchemaToEditorSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent, RelayActor} from './relay-machine'\n\nexport function RouteEventsToChanges(props: {\n  relayActor: RelayActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    const sub = props.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (change) {\n        handleChange(change)\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [props.relayActor])\n\n  return null\n}\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {AddedAnnotationPaths} from '../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport {eventToChange} from './route-events-to-changes'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                {this.props.children}\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {useSelected, useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport type {\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  const shouldTrackSelectionAndFocus =\n    annotationMarkDefs.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n\n    const winSelection = window.getSelection()\n\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blurred', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focused', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = props.renderDecorator({\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        selected,\n        schemaType: legacyDecoratorSchemaType,\n        value: mark,\n        type: legacyDecoratorSchemaType,\n      })\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            {props.renderAnnotation({\n              block,\n              children: children,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType: legacyAnnotationSchemaType,\n              value: annotationMarkDef,\n              type: legacyAnnotationSchemaType,\n            })}\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = props.renderChild({\n        annotations: annotationMarkDefs,\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        schemaType: legacySchema.span,\n        selected,\n        value: child,\n        type: legacySchema.span,\n      })\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation, toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\nexport type DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      decorate: {fn: (nodeEntry: NodeEntry) => Array<BaseRange>}\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': ({context}) => {\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of context.pendingRangeDecorations) {\n        const slateRange = toSlateRange(\n          rangeDecoration.selection,\n          context.slateEditor,\n        )\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'update range decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of event.rangeDecorations) {\n        const slateRange = toSlateRange(\n          rangeDecoration.selection,\n          context.slateEditor,\n        )\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n\n    'move range decorations': ({context, event}) => {\n      if (event.type !== 'slate operation') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const decoratedRange of context.slateEditor.decoratedRanges) {\n        const slateRange = toSlateRange(\n          decoratedRange.rangeDecoration.selection,\n          context.slateEditor,\n        )\n\n        if (!Range.isRange(slateRange)) {\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        let newRange: BaseRange | null | undefined\n\n        newRange = moveRangeByOperation(slateRange, event.operation)\n        if (\n          (newRange && newRange !== slateRange) ||\n          (newRange === null && slateRange)\n        ) {\n          const newRangeSelection = newRange\n            ? slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              })\n            : null\n\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: newRangeSelection,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n        }\n\n        // If the newRange is null, it means that the range is not valid anymore and should be removed\n        // If it's undefined, it means that the slateRange is still valid and should be kept\n        if (newRange !== null) {\n          rangeDecorationState.push({\n            ...(newRange || slateRange),\n            rangeDecoration: {\n              ...decoratedRange.rangeDecoration,\n              selection: slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              }),\n            },\n          })\n        }\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'update decorate': assign({\n      decorate: ({context}) => {\n        return {\n          fn: createDecorate(context.schema, context.slateEditor),\n        }\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) =>\n      context.slateEditor.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.slateEditor.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    decorate: {fn: createDecorate(input.schema, input.slateEditor)},\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: ['set up initial range decorations', 'update decorate'],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: ['set up initial range decorations', 'update decorate'],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'update decorate'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nfunction createDecorate(\n  schema: EditorSchema,\n  slateEditor: PortableTextSlateEditor,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (isEqualToEmptyEditor(slateEditor.children, schema)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return slateEditor.decoratedRanges.filter((decoratedRange) => {\n      // Special case in order to only return one decoration for collapsed ranges\n      if (Range.isCollapsed(decoratedRange)) {\n        // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n        return node.children.some(\n          (_, childIndex) =>\n            Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) &&\n            Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n        )\n      }\n\n      return (\n        Range.intersection(decoratedRange, {\n          anchor: {path, offset: 0},\n          focus: {path, offset: 0},\n        }) || Range.includes(decoratedRange, path)\n      )\n    })\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {rangeDecorationsMachine} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  const decorate = useSelector(\n    rangeDecorationsActor,\n    (s) => s.context.decorate?.fn,\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                      validateFields: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n\n      if (!event.isDefaultPrevented()) {\n        relayActor.send({type: 'focused', event})\n\n        if (\n          !slateEditor.selection &&\n          isEqualToEmptyEditor(\n            slateEditor.children,\n            editorActor.getSnapshot().context.schema,\n          )\n        ) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n      }\n    },\n    [editorActor, onFocus, relayActor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: position,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React from 'react'\n\ntype ConstantRef<TConstant> = {constant: TConstant}\n\nexport default function useConstant<TConstant>(\n  factory: () => TConstant,\n): TConstant {\n  const ref = React.useRef<ConstantRef<TConstant>>(null)\n\n  if (!ref.current) {\n    ref.current = {constant: factory()}\n  }\n\n  return ref.current.constant\n}\n","import type React from 'react'\nimport {useEffect} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport useConstant from '../internal-utils/use-constant'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\nimport {RouteEventsToChanges} from './route-events-to-changes'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const {internalEditor, portableTextEditor} = useConstant(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <RouteEventsToChanges\n        relayActor={internalEditor.actors.relayActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              {props.children}\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n","/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type FieldDefinition = {\n  name: string\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n}\n\n/**\n * @public\n */\nexport type DecoratorDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition\n\n/**\n * @public\n */\nexport type AnnotationDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition & {\n  fields?: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type BlockObjectDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition & {\n  fields?: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type InlineObjectDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition & {\n  fields?: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type ListDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition\n\n/**\n * @public\n */\nexport type StyleDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<DecoratorDefinition<TBaseDefinition>>\n  blockObjects?: ReadonlyArray<BlockObjectDefinition<TBaseDefinition>>\n  inlineObjects?: ReadonlyArray<InlineObjectDefinition<TBaseDefinition>>\n  annotations?: ReadonlyArray<AnnotationDefinition<TBaseDefinition>>\n  lists?: ReadonlyArray<ListDefinition<TBaseDefinition>>\n  styles?: ReadonlyArray<StyleDefinition<TBaseDefinition>>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n","import {startTransition, useContext, useEffect, useState} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const editorActor = useContext(EditorActorContext)\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  useEffect(() => {\n    const subscription = editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editorActor])\n\n  return selection\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","on","useEffectEvent","t0","subscription","unsubscribe","t1","useEffect","rootName","debug","debugWithName","name","namespace","enabled","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","block","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","Element","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","length","Text","isText","join","getBlockPath","blockPath","from","Editor","nodes","at","match","n","blockIndex","getFocusBlock","selection","node","focus","path","slice","getFocusSpan","isTextSpan","getSelectionStartBlock","selectionStartPoint","Range","start","getPointBlock","point","getSelectionEndBlock","selectionEndPoint","end","getFocusChild","focusBlock","focusBlockPath","childIndex","focusChild","Node","getPointChild","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","mode","some","isInline","blockObjects","blockObject","isListItemActive","listItem","selectedBlocks","isTextBlock","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchor","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","eventNode","getEventNode","eventBlock","context","eventPositionBlock","getEventPositionBlock","eventSelection","getEventSelection","utils","eventSelectionFocusBlockKey","getBlockKeyFromSelectionPoint","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","getBoundingClientRect","pageY","top","lastBlock","lastBlockRef","bottom","elementRect","height","Math","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","toSlatePath","blockKey","blockIndexMap","get","isVoid","childKey","getChildKeyFromSelectionPoint","childPath","concat","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","find","blk","cld","normalizeSelection","newAnchor","newFocus","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","jsx","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","jsxs","RenderDefaultInlineObject","inlineObject","getDragSelection","snapshot","dragSelection","selectors","draggingCollapsedSelection","draggedTextBlock","draggedSpan","selectionStartBlock","selectionEndBlock","defaultKeyGenerator","randomKey","getByteHexTable","table","i","toString","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","createEditorPriority","config","id","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","selected","useSelected","focused","useSlateSelector","isCollapsed","legacySchemaType","legacySchema","schemaType","error","attributes","readOnly","renderBlock","editorElementRef","RenderInlineObject","inlineObjectRef","useSlateStatic","inlineObjects","findPath","display","renderChild","annotations","RenderTextBlock","blockRef","listIndex","listIndexMap","renderStyle","legacyStyleSchemaType","renderListItem","legacyListItemSchemaType","lists","list","level","spellCheck","RenderElement","useSelector","_temp","_temp2","slateStatic","s_0","s","getLegacySchema","PortableTextEditorContext","usePortableTextEditor","forEachActor","actorRef","callback","Object","values","forEach","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","blocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","options","refreshKeys","validateFields","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","keyGenerator","unstable_whitespaceOnPasteMode","createConverterTextPlain","span","inlineObjectType","title","blockObjectType","filter","textToHtml","escapeHtml","split","line","replace","entityMap","String","createCoreConverters","compileType","rawType","Schema","compile","types","levelIndexMap","Map","buildIndexMaps","clear","previousListItem","set","levelCounter","createPlaceholderBlock","getActiveAnnotations","markState","mark","decorators","decorator","includes","getActiveDecorators","decoratorState","activeDecorators","activeDecorator","insertTextOperationImplementation","activeAnnotations","focusSpan","Transforms","insertText","state","markStateDecorators","insertNodes","isPortableTextSpan","isPortableTextBlock","def","getPreviousSpan","spanPath","previousSpan","reverse","Path","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","fn","prev","isChangingRemotely","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","beta","createWithPortableTextMarkModel","apply","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","markDefKeys","newMarkDefs","markDef","has","add","operations","op","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","isExpanded","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","onChange","targetBlock","targetPath","oldDefs","uniq","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","withUndoStep","current","undoStepId","getCurrentUndoStepId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","origin","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","deselect","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","findIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","paths","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","location","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","childSetOperationImplementation","childEntry","definition","fields","field","childUnsetOperationImplementation","newNode","newValue","applyAll","decoratorAddOperationImplementation","manualAnchor","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newSelection","offsets","trimmedSelection","newRange","splitTextNodes","isRange","existingMarks","deleteOperationImplementation","anchorBlockKey","focusBlockKey","anchorBlockPath","removeNodes","delete","unit","insertInlineObjectOperationImplementation","parsedInlineObject","parseInlineObject","focusTextBlock","insertSpanOperationImplementation","insertBlockOperationImplementation","fragment","insertBlock","placement","select","startBlock","startBlockPath","endBlock","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockStartPoint","splitNodes","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","to","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","behaviorOperationImplementations","performOperation","message","CURRENT_OPERATION_ID","withApplyingBehaviorOperations","getCurrentOperationId","isApplyingBehaviorOperations","createWithEventListeners","maxBlocks","editorDelete","behaviorEvent","deleteBackward","deleteForward","insertBreak","insertData","dataTransfer","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","entry","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlock","findBlockChild","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","targetChild","childrenToInsert","childInsertPath","oldText","newText","propPath","propEntry","reservedProps","nextRest","prevChildren","prevRest","blockNode","newVal","previousSelection","_","pteCreateTextBlock","newKeys","keys","removedProperties","property","unsetNodes","isMatch","isKeyedSegment","insertTextPatch","beforeValue","textChild","isSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","relayActor","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","operationId","createWithPlaceholderBlock","isLonelyBlock","isBlockObject","insertNode","createWithSchemaTypes","obj","createWithUtils","getMarkState","selectedSpans","getSelectedSpans","marksWithoutAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","pluginUpdateMarkState","pluginUpdateSelection","updateSelection","existingSelection","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","root","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","applyOperationToPortableTextDraft","e","finishDraft","insertedNode","before","after","prevPath","previous","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPlaceholderBlock","withUtils","createSlateEditor","withReact","createEditor","decoratedRanges","placeholderBlock","initialValue","createEditorDom","sendBack","getBlockNodes","getChildNodes","setDragGhost","ghost","childNode","setDragImage","x","y","addAnnotationOnCollapsedSelection","caretWordSelection","raise","coreAnnotationBehaviors","isKeyboardShortcut","allowedModifiers","toLowerCase","ctrlKey","metaKey","shiftKey","altKey","IS_APPLE","test","navigator","userAgent","createKeyboardShortcut","apple","default","defaultKeyboardShortcuts","arrowDown","arrowUp","break","lineBreak","strong","em","underline","code","tab","shiftTab","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","selectionCollapsed","isEmptyTextBlock","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","getCompoundClientRect","DOMRect","elements","firstRect","left","right","rect","min","max","coreDndBehaviors","dom","selectingEntireBlocks","draggedDomNodes","blockNodes","childNodes","dragGhost","createElement","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","blocksDomRect","clonedChildNodes","childrenDomRect","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","breakingInlineObject","focusInlineObject","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","coreListBehaviors","coreBehaviorsConfig","abstractAnnotationBehaviors","markDefKey","updatedMarkDefs","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","abstractInsertBehaviors","getFocusTextBlock","abstractKeyboardBehaviors","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getPreviousBlock","getNextBlock","abstractSelectBehaviors","getBlockEndPoint","getBlockStartPoint","abstractSplitBehaviors","blockEndPoint","newTextBlockSelection","newTextBlock","sliceTextBlock","abstractStyleBehaviors","isActiveStyle","raiseDeserializationSuccessOrFailure","success","failures","getData","deserializeEvent","failure","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","abstractBehaviors","setData","textRuns","getTextBlockText","textRun","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","nativeEvent","eventBehaviors","listenedNamespace","eventNamespace","preventDefault","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSet","actionsSnapshot","action","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","result","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","editorMachine","events","emitted","input","tags","assign","assertEvent","behaviorsSorted","enqueueActions","enqueue","emit","pendingEvents","pendingIncomingPatchesEvents","handle blur","ReactEditor","blur","handle focus","handle behavior event","self","guards","slate is busy","createMachine","initialReadOnly","states","initial","exit","dragstart","internalDrag","always","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","createLegacySchema","portableTextType","blockType","of","findBlockType","childrenField","ofType","spanType","memberType","inlineObjectTypes","blockObjectTypes","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","styleField","btField","textStyles","listField","listItems","temporaryImageName","temporaryUrlName","temporaryObjectNames","image","url","objectNames","defaultObjectTitles","legacySchemaToEditorSchema","jsonType","compileSchemaDefinitionToLegacySchema","defineType","portableTextSchema","defineField","startCase","SanitySchema","pteSchema","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","actors","fromCallback","originalApply","interval","setInterval","process","env","NODE_ENV","clearInterval","is read-only","stateIn","typing","slate is normalizing","isNormalizing","delays","invoke","src","reenter","mutations","and","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","spans","isAnnotationActive","annotationType","addAnnotation","SlateElement","removeAnnotation","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","relayMachine","prevSelection","lastEventWasFocused","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","m","orphanedMarks","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","syncValueCallback","updateValue","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","Promise","resolve","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","subscribe","RelayActorContext","RouteEventsToChanges","change","handleChange","change_0","eventToChange","isLoading","PortableTextEditor","Component","displayName","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","Fragment","Slate","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","RenderSpan","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","useMemo","leaf","decoratorSchemaTypes","annotationMarkDefs","shouldTrackSelectionAndFocus","sel","startTransition","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","legacyDecoratorSchemaType","renderDecorator","annotationMarkDef","legacyAnnotationSchemaType","renderAnnotation","_child","PLACEHOLDER_STYLE","pointerEvents","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","t3","rangeDecoration","component","RenderText","IS_MAC","modifiers","alt","control","meta","aliases","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","hotkeySegments","rawHotkeySegment","optional","endsWith","hotkeySegment","toKeyName","modifier","alias","TypeError","keyCode","toKeyCode","toUpperCase","charCodeAt","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","possibleMark","possibleCommand","slateOperationCallback","rangeDecorationsMachine","pendingRangeDecorations","rangeDecorations","set up initial range decorations","rangeDecorationState","slateRange","onMoved","update range decorations","move range decorations","decoratedRange","newRangeSelection","decorate","createDecorate","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","newRangeDecorations","not read only","should skip setup","skipSetup","intersection","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","useImperativeHandle","useSlate","rangeDecorationsActor","useActorRef","renderElement","eProps","renderLeaf","leafProps","renderText","restoreSelectionFromProps","normalizedSelection","o","onReady","onInvalidValue","onValueChanged","handleCopy","clipboardData","stopPropagation","handleCut","handlePaste","onPasteResult","then","parseBlocks","catch","finally","handleOnFocus","isDefaultPrevented","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","addEventListener","removeEventListener","handleDragStart","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable","className","useConstant","factory","React","constant","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","t4","t5","t6","t7","t8","t9","EditorContext","defineSchema","usePortableTextEditorSelection","setSelection"],"mappings":"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","x_google_ignoreList":[35,41]}